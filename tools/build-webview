#!/bin/bash
set -eu
unset CDPATH

# tools/build-webview: WebView assets collection script.
#
# This script collates and constructs WebView assets into a staging directory,
# then copies that staging directory to a build-system-provided destination.
#
# The former task is largely the responsibility of auxiliary build scripts. The
# latter is accomplished via rsync.

# CAVEAT EMENDATOR: Neither of the build systems have any visibility into this
# script's dependencies -- it is run unconditionally, and must ensure on its own
# that it performs as few actions as possible when nothing has changed.

################################################################################
# Common functions
################################################################################

# print usage message; do not die
usage() {
    cat >&2 <<EOF
usage: $0 [ios | android] --destination DEST

Builds a platform-local intermediate directory containing files used by the
message-list WebView. The target platform (either \`ios\` or \`android\`) must
be specified, along with the expected destination directory.

(This script is usually run automatically by the build system.)
EOF
}

# print error and die
err() {
    echo -e "$0:" $'\e[31merror:\e[0m' "$@" >&2
    exit 1;
}

# Common rsync invocation. Exported for use by auxiliary scripts.
#
# Filter rules are expected to be passed in via stdin; this is most easily
# accomplished with a heredoc, or `</dev/null` if unneeded.
#
# The last argument supplied must be the destination directory. (This wrapper
# does not support mixing positional and named arguments; positionals must come
# last.)
z_rsync() {
    # Create the destination directory. (rsync won't generally do this.)
    mkdir -p "${@: -1}"
    # Invoke rsync with the standard rules and exclusions, as well as whatever
    # other rules were specified by our invoker.
    rsync -a --no-D --delete --delete-excluded \
        --exclude=README.md --exclude=.gitignore \
        --filter='. /dev/stdin' \
        "$@"
}
export -f z_rsync

################################################################################
# Parameters and environment
################################################################################

# Chdir to the current git repo's root.
root="$(git rev-parse --show-toplevel)"
cd "$root"

# Ensure that we have access to a functional `readlink -f`.
. "$root"/tools/lib/ensure-coreutils.sh

# Parse arguments. Sloppy, but sufficient for now.
unset target
unset dest
sanity_checks=1
while (( $# )); do
    case "$1" in
        --help|-h|help)
            usage; exit 0;;
        android|ios)
            # no check for multiple nouns; oh well
            target="$1"; shift;;
        --destination)
            # note: this doesn't permit an equals sign after `--destination`
            shift; dest="$1"; shift;;
        --no-sanity-checks)
            # disables target-directory sanity checks, for testing's sake
            shift; sanity_checks=0;;
        *) usage; exit 2;;
    esac
done

if  [ -z "${target-}" ]; then
    usage; exit 2
elif [ -z "${dest-}" ]; then
    usage; exit 2
fi

# Make $dest absolute, if it isn't already.
dest=$(readlink -m "$dest")

# Sanity-check $dest and $target, if not explicitly disabled.
if (( sanity_checks )); then
    case "$target" in
        ios)
            if [ "$(uname)" != "Darwin" ]; then
                err "iOS builds only supported on macOS";
            fi

            # $dest should be copied to `${bundleroot}/webview`.
            #
            # $dest itself must be specified twice in Xcode: once in the invocation
            # of this script, and once in the "Copy Bundle Resources" step. If you
            # change it, you'll need to change it in both places. (And here, of
            # course.)
            if [[ "$dest" != "$root/ios/"* ]]; then
                err "unexpected destination directory '$dest' (expected target in iOS build dir)"
            fi
        ;;
        android)
            # $dest should be copied to `file:///android_asset/webview`.
            #
            # Gradle -- more precisely, the Android Gradle plugin -- is already
            # configured to copy some directory from `build/` into the APK. We
            # determine which directory that is in Gradle, and pass it here.
            if [[ "$dest" != "$root/android/app/build/"* ]]; then
                err "unexpected destination directory '$dest' (expected target in Android build dir)"
            fi
        ;;
        *) err "impossible target $target";;
    esac

    # As implied above, the ultimate destination of these files should be a
    # directory named `./webview` (relative to the platform-dependent asset
    # root directory).
    #
    # The target directory basename should therefore be 'webview': both build
    # systems will preserve the name they're given here.
    if [[ "$dest" != *"/webview" ]]; then
        err "unexpected destination directory '$dest'"
    fi
fi  # if sanity_checks

# Set $staging. This is our local staging directory; once it's assembled, it'll
# be synced over to $dest.
staging=src/webview/static
if [ ! -d "$staging" ]; then
    err "cannot find asset staging directory '$staging'";
fi

# The auxiliary build script directory.
aux_script_dir="$root"/tools/build-webview.d

################################################################################
# Pre-sync: additional build steps
################################################################################

# TODO: Use something like `make -f src/webview/static.Makefile`, to ensure that
#   complicated build steps are not run unconditionally.
#
# TODO: split assets into build-time-generated and build-time-static?
#   - rsync can sync from multiple directories, but has no collision-detection
#   - might be too many layers of abstraction


# Run each pre-sync auxiliary script.
#
# Each script gets a few selected parameters as environment variables.
for script in "${aux_script_dir}"/*.{all,"${target}"}.pre; do
    [ -f "$script" ] || continue
    ROOT="$root" TARGET="$target" STAGING="$staging" "$script"
done



################################################################################
# Sync
################################################################################

# Sync the directory structure, preserving metadata.
z_rsync "$staging/." "$dest" </dev/null


################################################################################
# Post-sync: additional build steps
################################################################################

# None yet.
